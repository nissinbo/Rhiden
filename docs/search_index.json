[["index.html", "医療情報DB解析のためのデータハンドリング大全 1 はじめに 1.1 What’s this? 1.2 サンプルデータ 1.3 作成・ビルド・管理(読まなくていいです) 1.4 To Do", " 医療情報DB解析のためのデータハンドリング大全 nissinbo 2021-03-18 00:34:35 1 はじめに 1.1 What’s this? Rによる医療情報DB解析のメモ 明記しない限りdata.frame, tidyverseの関数を用いる 1.2 サンプルデータ データハンドリングの例として、著者作成のデータを使用する レセプトデータをイメージした架空のデータ sample_patient.csv sample_drug.csv sample_disease.csv 以下のようにgithubから直接読み込む patient &lt;- read.csv(&quot;https://raw.githubusercontent.com/nissinbo/medical_database_RBook/master/data/patient.csv&quot;) disease &lt;- read.csv(&quot;https://raw.githubusercontent.com/nissinbo/medical_database_RBook/master/data/disease.csv&quot;) drug &lt;- read.csv(&quot;https://raw.githubusercontent.com/nissinbo/medical_database_RBook/master/data/drug.csv&quot;) 1.3 作成・ビルド・管理(読まなくていいです) bookdownパッケージを使用 チャンクラベルが重複しないように注意 BuildタブのBuild Bookをクリック githubで管理 1.4 To Do pull() "],["ディレクトリとr-project.html", "2 ディレクトリとR Project 2.1 作業ディレクトリ確認 2.2 作業ディレクトリ設定", " 2 ディレクトリとR Project ディレクトリの設定やR Projectについて記す 2.1 作業ディレクトリ確認 自分が今どこにいるか getwd() 2.2 作業ディレクトリ設定 setwd(&quot;./folder/path/here&quot;) Ctrl + Shift + HでGUIによる設定が可能 2.2.1 スクリプトファイルが存在するとこにsetwdしたい R Studioでのみ使用可 R Projectは使いたくないけど相対パスで管理したい場合は使える setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) 2.2.2 R Project 1つの分析プロジェクトに対して1つのR Projectを作成する .Rprojのあるフォルダがディレクトリになる 2.2.3 here package Rproj等を起点にファイルパスの指定ができる Windows/Macの互換などを気にする必要がなくなる uriboさん "],["入力.html", "3 入力 3.1 CSVファイル読込 3.2 Excelから読込(xlsx) 3.3 SASデータから読込(sas7bdat)", " 3 入力 3.1 CSVファイル読込 3.1.1 read.csv df &lt;- read.csv(&quot;df.csv&quot;) 3.1.2 fread data.frameで読み込むためにはdata.table = FALSE library(data.table) df &lt;- fread(&quot;df.csv&quot;, sep = &quot;,&quot;, data.table = FALSE) 3.1.3 型を明示して読み込み 読み込み時はこれを使ってやるのが一番安全 特に桁数の大きい患者ID等は必ずcharacterにする df &lt;- fread(&quot;test.csv&quot;, colClasses = c(id = &quot;character&quot;)) 3.2 Excelから読込(xlsx) openxlsx packageが気軽に使える データ型に注意 library(openxlsx) df &lt;- read.xlsx(&quot;df.xlsx&quot;) 3.3 SASデータから読込(sas7bdat) haven packageでSAS形式を直接読み取れる "],["データ確認.html", "4 データ確認 4.1 列ごと 4.2 dataframeの概要", " 4 データ確認 4.1 列ごと 4.1.1 欠損列を含む列を表示 disease %&gt;% summarise(across(everything(), ~sum(is.na(.)), .names = &quot;{.col}_na&quot;)) 4.1.2 ユニークデータ数 drug %&gt;% n_distinct(id) 4.1.3 列の型 mode, typeof disease %&gt;% summarise(across(everything(), ~mode(.))) disease %&gt;% summarise(across(everything(), ~typeof(.))) 4.1.4 列ごとに型、重複無し数、欠損数を表示 disease %&gt;% map_df(~(data.frame(class = class(.x), n_distinct = n_distinct(.x), isna = sum(is.na(.x)))), .id = &quot;variable&quot;) 4.2 dataframeの概要 4.2.1 dataframeの次元(行数と列数) dim(disease) 4.2.2 package summarytools::descr(), summarytools::dfSummary() skimr::skim() "],["データ編集.html", "5 データ編集 5.1 列の追加 5.2 列の編集 5.3 列の選択 5.4 列の削除 5.5 列の入替 5.6 列名関連 5.7 列名確認 5.8 列の作成・選択・入替・名前変更を一括で 5.9 並べ替え 5.10 条件によるフィルタ 5.11 その人のx番目の行を取得 5.12 その人の上からx番目の行を取得 5.13 特定のデータフレームの列に含まれる行を抽出 5.14 特定のデータフレームの列に含まれない行を抽出 5.15 重複削除 5.16 データを縦に結合 5.17 データを横に結合 5.18 マッチしたデータを横に結合 5.19 部分一致 5.20 正規表現 5.21 欠損値", " 5 データ編集 サンプルデータで実行例を示す 5.1 列の追加 5.1.1 mutate https://kazutan.github.io/kazutanR/hands_on_170730/mutate.html drug2 &lt;- mutate(drug, dose_amount_2 = dose_amount * 2) drug2 5.1.2 add_column 指定の位置に列を追加 drug %&gt;% add_column(new_var = &quot;value&quot;, .before = &quot;id&quot;) 5.1.3 複数の列から最大や最小を求める maxやminは基本列方向にしか働かないためrowwiseを使う よりよい書き方ありますか? df &lt;- disease %&gt;% rename(date_dis = date) %&gt;% # 列名重複を避ける為に変更しておく inner_join(drug, &quot;id&quot;) %&gt;% # 結合 rowwise() %&gt;% mutate(date_max = max(date, date_dis, na.rm = TRUE)) # NAは除外 5.1.4 条件分岐 if_else() case_when() 5.1.5 ビニング # mutate(bmigp = case_when(bmi &lt; 25 ~ 1, 25 &lt;= bmi &amp; bmi &lt; 30 ~ 2, 30 &lt;= bmi ~ 3)) # mutate(bmigp=cut(bmi, c(0, 25, 30, 40), labels=c(“nwt”, “owt”, “obese”), LEFT =FALSE)) 5.1.6 1行ずらす lag() lead() 5.2 列の編集 5.2.1 mutate mutateで既存の列を指定すれば上書きになる drug2 &lt;- mutate(drug, dose_amount = as.character(dose_amount)) 5.2.2 mutate, across 制作中 5.3 列の選択 selectを使う 列番号または列名による指定が可能 drug2 &lt;- drug %&gt;% select(1, 3) drug2 &lt;- drug %&gt;% select(id, atccode) 5.4 列の削除 selectで「!」を使うと削除になる 列番号または列名による指定が可能 drug2 &lt;- drug %&gt;% select(!2, !4) drug2 &lt;- drug %&gt;% select(!id, !atccode) 5.4.1 列名が重複してる場合 列名が重複してるデータをもらった場合、select等で列名を指定することができない tibble::repair_names()を使うと列名の重複を解消してくれる 5.5 列の入替 列番号または列名による指定が可能 patient2 &lt;- patient %&gt;% select(2, 3, 1) patient2 &lt;- patient %&gt;% select(gender, start_date, id) 5.6 列名関連 5.7 列名確認 colnames(patient) 5.7.1 一部変更 patient2 &lt;- patient %&gt;% rename(patientid = id) 5.7.2 全体変更 patient2 &lt;- patient %&gt;% set_colnames(c(&quot;col1&quot;, &quot;col2&quot;, &quot;col3&quot;)) 5.8 列の作成・選択・入替・名前変更を一括で transmuteを使うと上記の作業を一行で書くことができる patient2 &lt;- patient %&gt;% transmute(gender, patientid = id) 5.9 並べ替え 複数の列をキーにして並べ替えることもできる patient2 &lt;- patient %&gt;% arrange(start_date) 5.10 条件によるフィルタ # idが1の患者み patient2 &lt;- patient %&gt;% filter(id == 1) # idが5以下の患者のみ patient2 &lt;- patient %&gt;% filter(id &lt;= 5) # genderがMの患者のみ patient2 &lt;- patient %&gt;% filter(gender == &quot;M&quot;) 5.11 その人のx番目の行を取得 row_number()を使う disease2 &lt;- disease %&gt;% group_by(id) %&gt;% filter(row_number() == 2) %&gt;% # ここの数字を変えてx番目の行を取得 ungroup() 5.12 その人の上からx番目の行を取得 row_number()の例を不等号に変えればできるが、top_n()の例を示す disease2 &lt;- disease %&gt;% group_by(id) %&gt;% top_n(2, date) %&gt;% # ここの数字を変えて1~x番目の行を取得 ungroup() 5.13 特定のデータフレームの列に含まれる行を抽出 filterと%in%か、semi_joinを使う # 一例としてデータフレームを作成する df &lt;- data.frame(id = c(1, 3, 5), var = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) patient2 &lt;- filter(patient, id %in% df$id) patient2 &lt;- semi_join(patient, df, &quot;id&quot;) 5.14 特定のデータフレームの列に含まれない行を抽出 filterと%in%か、anti_joinを使う # 一例としてデータフレームを作成する df &lt;- data.frame(id = c(1, 3, 5), var = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) patient2 &lt;- filter(patient, !(id %in% df$id)) patient2 &lt;- anti_join(patient, df, &quot;id&quot;) 5.15 重複削除 初回処方日や初診断月の特定に用いることが多い 5.15.1 distinct drug2 &lt;- drug %&gt;% distinct(id, .keep_all = TRUE) 5.15.2 first drug2 &lt;- drug %&gt;% group_by(id) %&gt;% first() %&gt;% ungroup() 5.16 データを縦に結合 patient2 &lt;- bind_rows(patient, patient) 5.17 データを横に結合 patient2 &lt;- bind_cols(patient, patient) 5.18 マッチしたデータを横に結合 基本的にleft_joinとinner_joinが使えればOK 使い分けについては以下URLなどを参考に https://qiita.com/matsuou1/items/b1bd9778610e3a586e71 df &lt;- left_join(patient, disease, &quot;id&quot;) df &lt;- inner_join(patient, disease, &quot;id&quot;) 2つのデータで同名の列があると接尾に「.x」と「.y」がつくが、suffixを使うと自分で指定できる df &lt;- inner_join(drug, disease, &quot;id&quot;, suffix = c(&quot;_drug&quot;, &quot;_disease&quot;)) 5.19 部分一致 5.19.1 文字列一致判定 str_detect() 5.19.2 文字列置換 str_replace(), str_replace_all() https://qiita.com/kazutan/items/0b690961d4516e48f6c0 5.19.3 文字列削除 str_remove() 5.20 正規表現 5.21 欠損値 https://qiita.com/five-dots/items/361a42baf1e94edf5846 "],["ggplot2によるvisualization.html", "6 ggplot2によるVisualization 6.1 基本 6.2 応用 6.3 生存時間分析 6.4 便利なサイト", " 6 ggplot2によるVisualization 制作中です 6.1 基本 6.2 応用 6.2.1 図中にテキストラベルを入れる ggrepel(https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html) 6.2.2 複数の図を並べる patchwork 6.3 生存時間分析 6.3.1 ggforest 6.3.2 Kaplan-Meier曲線 6.4 便利なサイト data to viz 手持ちのデータから、どのように視覚化するかを教えてくれる "],["統計解析.html", "7 統計解析 7.1 検定 7.2 回帰分析 7.3 生存時間分析", " 7 統計解析 制作中 inferパッケージのchisq_test()が便利。 tidy dataから、一発で検定できる。 library(infer) mtcars %&gt;% mutate(cyl = factor(cyl), am = factor(am)) %&gt;% chisq_test(cyl ~ am) 7.1 検定 7.1.1 t検定 7.1.2 Wilcoxonの順位和検定 {coin}のwilcox_test()を使おう。 参考文献 wilcox_test(number ~ group, data = df, distribution = &quot;exact&quot;) 7.1.3 分割表の検定 カイ二乗検定, フィッシャーの正確検定 7.2 回帰分析 7.2.1 重回帰 7.2.2 ロジスティック回帰 7.2.2.1 broom library(broom) tidy(model, conf.int = TRUE, exponentiate = TRUE) 7.3 生存時間分析 https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html 7.3.1 Cox回帰 {survival}と{survminer}を使う。 library(survival) library(survminer) cox &lt;- coxph(Surv(time, event) ~ group + sex + age, method = &quot;breslow&quot;, data = dat) ggforest(cox) "],["出力保存.html", "8 出力・保存 8.1 表を作る 8.2 RData, RDSで出力 8.3 csvで出力 8.4 xlsxで出力 8.5 結果の出力", " 8 出力・保存 作成中 8.1 表を作る 8.1.1 kable 8.1.2 DT 8.1.3 tableOne 8.1.4 gt, gsummary 8.1.5 flextable, ftExtra 8.2 RData, RDSで出力 複数のオブジェクトを1つのRDataに保存することも可能 RDataとRDSは微妙な違いがあるそう save(df, file = &quot;df.RData&quot;) save(df, file = &quot;df.rda&quot;) save(df1, df2, df3, file = &quot;df.RData&quot;) saveRDS(x, file=&quot;x.Rds&quot;) 8.3 csvで出力 8.3.1 デフォルト関数 write.csv(df, &quot;df.csv&quot;, row.names = F) 8.3.2 fwrite library(data.table) fwrite(df, &quot;df.csv&quot;) 8.4 xlsxで出力 library(openxlsx) write.xlsx(df, &quot;df.xlsx&quot;) 8.5 結果の出力 consoleの出力結果を保存する場合 8.5.1 sink sink()でリセットされる append = FALSEで上書き(デフォルト) TRUEで追記 sink(&quot;./result.txt&quot;, append = FALSE) print(1 + 1) sink() "],["自作関数.html", "9 自作関数 9.1 自作関数の作り方", " 9 自作関数 制作中 9.1 自作関数の作り方 NSE https://rlang.r-lib.org/reference/nse-force.html "],["r-markdown.html", "10 R Markdown 10.1 R Markdownの基本 10.2 Chunk Option 10.3 Rmdでのディレクトリ設定 10.4 knitの出力先指定", " 10 R Markdown 制作中 10.1 R Markdownの基本 クックブックook/ 10.2 Chunk Option 各Chunkごとに各種設定が行える 参考文献1 参考文献2 マイナーだが便利なオプション cache fig.width fig.height 10.2.1 Global Option Rmdファイル全体に適用したいoptionは、Global Optionとして設定できる。 opts_chunk$set(prompt = TRUE, message = FALSE) 10.3 Rmdでのディレクトリ設定 Rmdではsetwdをしてもチャンク毎にリセットされる。 ファイルでディレクトリを設定したい場合は、以下のように設定する。 opts_chunk$set(root.dir = &quot;/path/to/folder/&quot;) 10.4 knitの出力先指定 knit: (function(...) rmarkdown::render(..., output_file = &quot;./result.html&quot;, envir=.GlobalEnv)) "],["使用パッケージ.html", "11 使用パッケージ 11.1 必須 11.2 推奨", " 11 使用パッケージ 11.1 必須 11.1.1 全般 remotes usethis installr rstudioapi fs here eply MilesMcBain/breakerofchains 11.1.2 パッケージ管理 BiocManager pacman 11.1.3 データ分析 tidyverse openxlsx dummies data.table 11.1.4 統計解析 tidymodels survival survminer 11.1.5 表 tableone gt gtsummary DT flextable ftExtra 11.1.6 グラフ・可視化 DiagrammeR DiagrammeRsvg psych summarytools skimr DataExplorer ggsignif patchwork VennDiagram 11.1.7 R Markdown rmarkdown revealjs knitr rmdformats 11.1.8 アプリ Shiny rsconnect shinycssloaders 11.1.9 スクレイピング rvest 11.1.10 Reproducible datapasta 11.1.11 Docker docker liftr install.packages(c( &quot;remotes&quot;, &quot;usethis&quot;, &quot;installr&quot;, &quot;rstudioapi&quot;, &quot;fs&quot;, &quot;eply&quot;, &quot;here&quot;, &quot;BiocManager&quot;, &quot;pacman&quot;, &quot;tidyverse&quot;, &quot;openxlsx&quot;, &quot;dummies&quot;, &quot;data.table&quot;, &quot;tidymodels&quot;, &quot;survival&quot;, &quot;survminer&quot;, &quot;tableone&quot;, &quot;gt&quot;, &quot;gtsummary&quot;, &quot;DT&quot;, &quot;flextable&quot;, &quot;ftExtra&quot;, &quot;DiagrammeR&quot;, &quot;DiagrammeRsvg&quot;, &quot;psych&quot;, &quot;summarytools&quot;, &quot;skimr&quot;, &quot;DataExplorer&quot;, &quot;ggsignif&quot;, &quot;patchwork&quot;, &quot;VennDiagram&quot;, &quot;rmarkdown&quot;, &quot;revealjs&quot;, &quot;knitr&quot;, &quot;rmdformats&quot;, &quot;Shiny&quot;, &quot;rsconnect&quot;, &quot;shinycssloaders&quot;, &quot;rvest&quot;, &quot;datapasta&quot;, &quot;docker&quot;, &quot;liftr&quot; ), dependencies=TRUE) remotes::install_github(&quot;MilesMcBain/breakerofchains&quot;) 11.2 推奨 11.2.1 汎用 devtools reticulate codicR conflicted lintr drake 11.2.2 並列処理 doParallel 11.2.3 R学習 swirl learnr 11.2.4 グラフ ggsci ggrepel GGally officer stargazer myprettyreport corrplot corrr plotly 11.2.5 RStan rstan 11.2.6 LaTeX tinytex 11.2.7 SAS SASmarkdown 11.2.8 疫学 Epi epiR comorbidity icd ggdag 11.2.9 データ分析・機械学習 smartdata bit64 11.2.10 スクレイピング RSelenium 11.2.11 時間計測 tictoc 11.2.12 資料作成 xaringan export INWTlab/ireports remotes::install_github(“INWTlab/ireports”) 11.2.13 アドイン colourPicker colourPicker ggThemeAssist ggplot Theme Assistant styler style active file "],["tips.html", "12 Tips 12.1 R Studioの設定 12.2 ショートカットキー 12.3 # シャープ 12.4 if(0) 12.5 時間計測 12.6 Rの学習・情報を得る 12.7 パッケージの情報を得る 12.8 ググるにあたって 12.9 コーディングスタイルガイド 12.10 Advanced R 12.11 プログラミング時の留意点 12.12 ミスしがちなところ 12.13 メモリ開放 12.14 サンプルデータ作成", " 12 Tips 細かな覚え書き 12.1 R Studioの設定 Windows ~/AppData/Roaming/RStudio/ UNIX ~/.config/rstudio/ rstudio-prefs.json /keybindings/rstudio_bindings.json /keybindings/editor_bindings.json /keybindings/addins.json /snippets/r.snippets 12.2 ショートカットキー https://appsilon.com/rstudio-shortcuts-and-tips/ 動作 キー &lt;- Alt + - %&gt;% Ctrl+Shift+M Rmarkdown knit Ctrl+Shift+K chunk挿入，chunk分割 Ctrl+Shift+I インデント自動揃え Ctrl+I Consoleの+を消す Esc カーソルをスクリプトへ Ctrl+1 カーソルをコンソールへ Ctrl+2 関数自動作成 Ctrl+Alt+X 見出し,チャンクへジャンプ Alt+Shift+J 参考文献 12.3 # シャープ Rスクリプトにコメントを残すには#をつける。 manipulation(df, option = TRUE) # これはコメントです コメントを残すのは、コードレビューしてもらうときのためと、自分が後で見返したときのため。 最初は苦痛かもしれないが、トータルで絶対得なのでコメント書きまくろう。 12.4 if(0) 1行とかの操作を一時的に実行させない場合は上記の#を使えばいい。 実行させたくない操作が多くの行にまたがっている場合は、if(0){}を使うのがおすすめ。 if(0){ veryverylong_action(df) %&gt;% hogehoge(mano = TRUE) %&gt;% tonikaku_nagai_syori() } if(0){}で囲まれたコードは実行されない。実行させたいときはif(1){}とすればよいので、いわばスイッチになる。 12.4.1 パッケージ無かったらインストール if (!require(&quot;dplyr&quot;)) {install.packages(&quot;dplyr&quot;)} 12.4.2 警告を出力せず読み込む suppressWarnings(library(tidyverse)) 12.5 時間計測 12.5.1 tictoc 12.6 Rの学習・情報を得る 12.6.1 ネット R初心者の館 Rによるデータ前処理実習 R関連の情報源 Rクックブック https://www.marketechlabo.com/r-tips/ 12.7 パッケージの情報を得る まずは「パッケージ名+R」で検索し、CRANの公式ドキュメントを見る。英語だがこれを見るのは大事。 githubというサイトにはパッケージの関数がどのように定義されているかが載っているので余力があれば見る。 以下のサイトを使えばGoogle翻訳を駆使して日本語で理解できるかも。 RDocumentation rdrr.io METACRAN 12.8 ググるにあたって わからないことがあったらググる習慣をつけよう。 特に、英語で検索をかけると望みのものが見つかることが多い。 以下に検索に便利なキーワードの書いておく。 知りたいこと キーワード エラーの理由 エラーメッセージコピペ tidy dataから検定したい (検定名) + tidy 12.9 コーディングスタイルガイド tidyverse style guide 12.10 Advanced R Advanced R 第1版 Advanced R 第2版 12.11 プログラミング時の留意点 12.11.1 心がけること 加工前後のデータを比較して、ロジックに問題がないか確認 エラーはあるものと思い、何回も確認 第三者が見ても分かるようにコメントをつける 第三者にコードレビューしてもらう 対象者のフローチャートを書く 12.11.2 できれば行いたいこと 変数定義書を作成 第三者にプログラムを書いてもらい、結果が一致するか確認 12.12 ミスしがちなところ 12.12.1 汎用的なところ タイプミス、スペルミス numeric、character、factor 12.12.2 医療情報データベース特有 年月の差をとるのに普通に引き算 疑いフラグ抜き忘れ 処方日、検査値等の欠損 12.12.3 Rのアップデート 素のRから以下のコードを実行する。 うまくいかない場合は普通にここからダウンロード。 installr::updateR(browse_news = FALSE, install_R = TRUE, copy_packages = FALSE,copy_Rprofile.site = FALSE, keep_old_packages = FALSE, update_packages = TRUE, start_new_R = FALSE,quit_R = TRUE) 12.13 メモリ開放 参考文献 重いデータを読み込んだ時等に、Rの挙動が不安定になったときは以下を実行する。 gc(reset = TRUE) gc(reset = TRUE) 12.14 サンプルデータ作成 12.14.1 data.frame()を使う df &lt;- data.frame(id = c(1,1,2,2,3,3,4,4), value = c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;b&quot;)) 12.14.2 read.table()を使う df &lt;- read.table(text = &quot;id samediff factor value 1 S give 3 1 S impact 4 2 S give 2 2 S impact 5 3 D give 1 3 D impact 4 4 D give 3 4 D impact 5&quot;, header = TRUE, stringsAsFactors = FALSE) 12.14.3 datapasta "],["テンプレートフォーマット.html", "13 テンプレート・フォーマット 13.1 R Markdown 13.2 ggplot2 13.3 shiny", " 13 テンプレート・フォーマット 13.1 R Markdown 13.1.1 rmdformatsパッケージ robobook bookdownで作ったときと似た感じになる HTML clean template 13.1.2 Rmd to Word https://github.com/INWTlab/ireports 13.2 ggplot2 https://rstudio.github.io/thematic/ 13.3 shiny https://github.com/nanxstats/awesome-shiny-extensions https://github.com/rstudio/bslib https://blog.misw.jp/entry/archives/2821 https://github.com/r4fun/icongram "]]
